package ntnu.idatt2105.semesterProject.eCommerceMarketplace.controller;

import ntnu.idatt2105.semesterProject.eCommerceMarketplace.accessingdatamysql.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.Optional;

@RestController
@CrossOrigin(origins = "http://localhost:5173/", allowCredentials = "true")
public class MainController {
    // This means to get the bean called userRepository, which is auto-generated by Spring

    @Autowired
    private UserRepository userRepository;
    @Autowired
    private ItemRepository itemRepository;


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    @PostMapping("/login")
    public @ResponseBody boolean isUser(@RequestBody Map<String, Object> payload) {
        String username = payload.get("username").toString();
        String password = payload.get("password").toString();

        for (User user : userRepository.findAll()) {
            if (user.getUsername().equals(username) && user.getPassword().equals(password)) {
                return true;
            }
        }
        return false;
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




    // Create new user and adds it to database
    // Proposed solution for return values:
    // 0: username ALREADY EXIST
    // 1: phoneNumber ALREADY EXIST
    // 2: email ALREADY EXIST
    // 3: CREATED
    // 4: ERROR

    @RequestMapping(value = "/createuser", method = RequestMethod.POST)
    public @ResponseBody int createUser(@RequestBody User user) {
        try {

            // Checks if user with given username already exist in database
            if (userRepository.findByUsername(user.getUsername())!= null) {
                return 0;
            }

            // Checks if user with given phone_number already exist in database
            if (userRepository.findByPhoneNumber(user.getPhoneNumber()) != null) {
                return 1;
            }

            // Checks if user with given phone_number already exist in database
            if (userRepository.findByEmail(user.getEmail()) != null) {
                return 2;
            }

            // Since username, phoneNumber and email were not already taken, user is created
            userRepository.save(user);
            return 3;

        } catch (Exception e) {
            System.out.println(e.getMessage());
            return 4;
        }
    }




    // Return all users

    @GetMapping("/user")
    public @ResponseBody Iterable<User> getAllUsers() {
        return userRepository.findAll();
    }




    // Return user with given id

    @GetMapping("/user/{id}")
    public @ResponseBody Optional<User> getUser(@PathVariable int id) {
        return userRepository.findById(id);
    }




    // Update user (id must be present in payload, or new user will be created)

    @PutMapping("/updateuser")
    public @ResponseBody boolean updateUser(@RequestBody User user) {
        try {
            userRepository.save(user);
            return true;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
    }



    // Delete user (id must be present in payload, or new user will be created)

    @DeleteMapping("/deleteuser")
    public @ResponseBody boolean deleteUser(@RequestBody User user) {
        try {
            userRepository.delete(user);
            return true;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
    }




    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




    @PostMapping("/createitem")
    public @ResponseBody boolean createItem(@RequestBody Item item) {

        try {
            itemRepository.save(item);
            return true;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
    }

    // Return all users
    @GetMapping("/getitems")
    public @ResponseBody Iterable<Item> getAllItems() {
        return itemRepository.findAll();

    }
}
